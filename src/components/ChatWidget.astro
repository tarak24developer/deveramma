---
import { isChatOnline } from '../utils/chat';
import { CHAT_CONFIG } from '../config';

// Define supported languages as a type for type safety
type SupportedLanguages = 'en' | 'te';

// Define the prop type with language constraint
interface Props {
  lang?: SupportedLanguages;
}

const { lang = 'en' } = Astro.props as Props;

// Check if chat is online based on configuration
const isOnline = isChatOnline();

// Translations for the chat widget
const translations: Record<SupportedLanguages, {
  chatBtnLabel: string;
  chatHeader: string;
  welcomeMessage: string;
  placeholder: string;
  sendBtnLabel: string;
  offline: string;
  emailLabel: string;
  nameLabel: string;
}> = {
  en: {
    chatBtnLabel: "Chat with us",
    chatHeader: "Devaramma Temple Chat",
    welcomeMessage: isOnline 
      ? "Welcome to Devaramma Temple chat. How may we help you today?"
      : "We're currently offline. Please leave a message and we'll get back to you soon.",
    placeholder: "Type your message...",
    sendBtnLabel: "Send",
    offline: "We're currently offline. Please leave a message and we'll get back to you soon.",
    emailLabel: "Your email (optional)",
    nameLabel: "Your name (optional)"
  },
  te: {
    chatBtnLabel: "మాతో చాట్ చేయండి",
    chatHeader: "దేవరమ్మ దేవాలయ చాట్",
    welcomeMessage: isOnline
      ? "దేవరమ్మ దేవాలయ చాట్‌కు స్వాగతం. మేము మీకు ఎలా సహాయపడగలము?"
      : "మేము ప్రస్తుతం ఆఫ్‌లైన్‌లో ఉన్నాము. దయచేసి సందేశాన్ని వదిలివేయండి మరియు మేము త్వరలో మీకు తిరిగి సమాధానం ఇస్తాము.",
    placeholder: "మీ సందేశాన్ని టైప్ చేయండి...",
    sendBtnLabel: "పంపించు",
    offline: "మేము ప్రస్తుతం ఆఫ్‌లైన్‌లో ఉన్నాము. దయచేసి సందేశాన్ని వదిలివేయండి మరియు మేము త్వరలో మీకు తిరిగి సమాధానం ఇస్తాము.",
    emailLabel: "మీ ఇమెయిల్ (ఐచ్ఛికం)",
    nameLabel: "మీ పేరు (ఐచ్ఛికం)"  }
};

// Ensure we get a valid translation object
const t = translations[lang] || translations.en;
---

<div id="chat-widget" class="chat-widget">
  <button id="chat-toggle" class="chat-toggle" aria-label={t.chatBtnLabel}>
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="chat-icon">
      <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
    </svg>
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="close-icon">
      <line x1="18" y1="6" x2="6" y2="18"></line>
      <line x1="6" y1="6" x2="18" y2="18"></line>
    </svg>
  </button>
    <div id="chat-box" class="chat-box">
    <div class="chat-header">
      <h3>{t.chatHeader}</h3>
      <div class="chat-controls">
        <span class="status-indicator" data-online={isOnline}></span>
        <button id="chat-minimize" class="chat-minimize" aria-label="Minimize chat">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="5" y1="12" x2="19" y2="12"></line>
          </svg>
        </button>
      </div>
    </div>
      <div id="chat-messages" class="chat-messages">
      <div class="message system">
        <p>{t.welcomeMessage}</p>
        <small class="timestamp">{new Date().getHours()}:{String(new Date().getMinutes()).padStart(2, '0')}</small>
      </div>
    </div>
      <div class="visitor-info" id="visitor-info" style="display: none;">
      <input type="text" id="visitor-name" placeholder={t.nameLabel} class="visitor-name">
      <input type="email" id="visitor-email" placeholder={t.emailLabel} class="visitor-email">
    </div>
    
    <div class="chat-input">
      <textarea id="chat-input-field" placeholder={t.placeholder} rows="1"></textarea>
      <button id="chat-send" class="chat-send" aria-label={t.sendBtnLabel}>
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="22" y1="2" x2="11" y2="13"></line>
          <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
        </svg>
      </button>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Get DOM elements
    const chatToggle = document.getElementById('chat-toggle');
    const chatBox = document.getElementById('chat-box');
    const chatMinimize = document.getElementById('chat-minimize');
    const chatMessages = document.getElementById('chat-messages');
    const chatInputField = document.getElementById('chat-input-field') as HTMLTextAreaElement;
    const chatSend = document.getElementById('chat-send');
    const visitorInfo = document.getElementById('visitor-info');
    const visitorEmail = document.getElementById('visitor-email') as HTMLInputElement;
    const visitorName = document.getElementById('visitor-name') as HTMLInputElement;
    
    // Only proceed if elements are found
    if (!chatToggle || !chatBox || !chatMessages) {
      console.error('Chat elements not found');
      return;
    }
    
    // Show/hide chat box
    chatToggle.addEventListener('click', () => {
      chatBox.classList.toggle('open');
      chatToggle.classList.toggle('active');
      
      // If opening the chat, focus on input
      if (chatBox.classList.contains('open') && chatInputField) {
        chatInputField.focus();
      }
    });
    
    // Minimize chat
    if (chatMinimize) {
      chatMinimize.addEventListener('click', () => {
        if (chatBox) {
          chatBox.classList.remove('open');
        }
        if (chatToggle) {
          chatToggle.classList.remove('active');
        }
      });
    }
    
    // Auto-resize textarea
    if (chatInputField) {
      chatInputField.addEventListener('input', function() {
        this.style.height = 'auto';
        this.style.height = (this.scrollHeight) + 'px';
        
        // Reset height if empty
        if (this.value.trim() === '') {
          this.style.height = '';
        }
      });
    }
    
    // Send message on button click
    if (chatSend) {
      chatSend.addEventListener('click', sendMessage);
    }
    
    // Send message on Enter (but allow Shift+Enter for new lines)
    if (chatInputField) {
      chatInputField.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          sendMessage();
        }
      });
    }
    
    function sendMessage() {
      if (!chatInputField || !chatMessages) return;
      
      const message = chatInputField.value.trim();
      if (message === '') return;
      
      // Add user message to chat
      addMessage('user', message);
      
      // Clear input field
      chatInputField.value = '';
      chatInputField.style.height = '';
      
      // Show visitor info fields after first message
      if (visitorInfo && visitorInfo.style.display === 'none') {
        visitorInfo.style.display = 'flex';
      }
      
      // Show loading indicator
      const loadingDiv = document.createElement('div');
      loadingDiv.className = 'message system loading';
      loadingDiv.innerHTML = '<div class="dots"><span></span><span></span><span></span></div>';
      chatMessages.appendChild(loadingDiv);
      
      if (chatMessages.scrollHeight) {
        chatMessages.scrollTop = chatMessages.scrollHeight;
      }
      
      // Get visitor info
      const email = visitorEmail ? visitorEmail.value.trim() : '';
      const name = visitorName ? visitorName.value.trim() : '';
      
      // Send message to API
      fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ message, email, name })
      })
      .then(response => response.json())
      .then(data => {
        // Remove loading indicator if it still exists
        if (chatMessages && loadingDiv && chatMessages.contains(loadingDiv)) {
          chatMessages.removeChild(loadingDiv);
        }
        
        // Add response from server
        if (data.response) {
          addMessage('system', data.response);
        } else {
          addMessage('system', "Thank you for your message. Our team will respond shortly.");
        }
      })
      .catch(error => {
        console.error('Error sending chat message:', error);
        // Remove loading indicator if it still exists
        if (chatMessages && loadingDiv && chatMessages.contains(loadingDiv)) {
          chatMessages.removeChild(loadingDiv);
        }
        addMessage('system', "Sorry, there was an error sending your message. Please try again later.");
      });
    }
    
    function addMessage(type: string, content: string) {
      if (!chatMessages) return;
      
      const messageDiv = document.createElement('div');
      messageDiv.className = `message ${type}`;
      
      const paragraph = document.createElement('p');
      paragraph.textContent = content;
      
      messageDiv.appendChild(paragraph);
      
      // Add timestamp for all messages
      const timestamp = document.createElement('small');
      timestamp.className = 'timestamp';
      const now = new Date();
      timestamp.textContent = `${now.getHours()}:${String(now.getMinutes()).padStart(2, '0')}`;
      messageDiv.appendChild(timestamp);
      
      chatMessages.appendChild(messageDiv);
      
      // Scroll to bottom
      if (chatMessages.scrollHeight) {
        chatMessages.scrollTop = chatMessages.scrollHeight;
      }
      
      // Save chat to local storage
      saveChatToLocalStorage();
    }
      // Save chat history to localStorage
    function saveChatToLocalStorage() {
      if (!chatMessages) return;
      
      try {
        type ChatMessage = {
          type: string;
          content: string;
          time: string;
        };
        
        const messages: ChatMessage[] = [];
        const messageElements = chatMessages.querySelectorAll('.message');
        
        messageElements.forEach(el => {
          const type = el.classList.contains('user') ? 'user' : 'system';
          const contentEl = el.querySelector('p');
          const timeEl = el.querySelector('.timestamp');
          const content = contentEl ? contentEl.textContent || '' : '';
          const time = timeEl ? timeEl.textContent || '' : '';
          
          messages.push({ type, content, time });
        });
        
        localStorage.setItem('devaramma_chat', JSON.stringify(messages));
      } catch (e) {
        console.error('Error saving chat history:', e);
      }
    }
    
    // Load chat history from localStorage
    function loadChatFromLocalStorage() {
      if (!chatMessages) return;
      
      try {
        const savedChat = localStorage.getItem('devaramma_chat');
        if (savedChat) {
          const messages = JSON.parse(savedChat);
          
          // Clear default welcome message
          chatMessages.innerHTML = '';
          
          // Add saved messages
          messages.forEach((msg: {type: string, content: string, time: string}) => {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${msg.type}`;
            
            const paragraph = document.createElement('p');
            paragraph.textContent = msg.content;
            messageDiv.appendChild(paragraph);
            
            if (msg.time) {
              const timestamp = document.createElement('small');
              timestamp.className = 'timestamp';
              timestamp.textContent = msg.time;
              messageDiv.appendChild(timestamp);
            }
            
            chatMessages.appendChild(messageDiv);
          });
          
          // Show visitor info form if we have saved messages
          if (messages.length > 0 && visitorInfo) {
            visitorInfo.style.display = 'flex';
          }
        }
      } catch (e) {
        console.error('Error loading chat history:', e);
      }
    }
    
    // Uncomment to enable persistent chat across page loads
    // loadChatFromLocalStorage();
  });
</script>

<style>
  .chat-widget {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 1000;
    font-family: 'Poppins', sans-serif;
  }
  
  .chat-toggle {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background-color: var(--primary-color, #8B0000);
    color: white;
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    transition: all 0.3s ease;
  }
  
  .chat-toggle:hover {
    transform: translateY(-3px);
    box-shadow: 0 7px 15px rgba(0, 0, 0, 0.2);
  }
  
  .chat-toggle .close-icon {
    display: none;
  }
  
  .chat-toggle.active .chat-icon {
    display: none;
  }
  
  .chat-toggle.active .close-icon {
    display: block;
  }
  
  .chat-box {
    position: absolute;
    bottom: 80px;
    right: 0;
    width: 350px;
    height: 450px;
    background-color: white;
    border-radius: 10px;
    box-shadow: 0 5px 25px rgba(0, 0, 0, 0.15);
    display: flex;
    flex-direction: column;
    overflow: hidden;
    transition: all 0.3s ease;
    opacity: 0;
    transform: translateY(20px) scale(0.9);
    pointer-events: none;
  }
  
  .chat-box.open {
    opacity: 1;
    transform: translateY(0) scale(1);
    pointer-events: all;
  }
  
  .chat-header {
    padding: 15px 20px;
    background-color: var(--primary-color, #8B0000);
    color: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .chat-header h3 {
    margin: 0;
    font-size: 1.1rem;
  }
  
  .chat-controls {
    display: flex;
    align-items: center;
    gap: 10px;
  }
  
  .status-indicator {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: #ccc;
  }
  
  .status-indicator[data-online="true"] {
    background-color: #4CAF50;
  }
  
  .status-indicator[data-online="false"] {
    background-color: #F44336;
  }
  
  .chat-minimize {
    background: transparent;
    border: none;
    color: white;
    cursor: pointer;
    padding: 0;
  }
  
  .chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: 15px;
    display: flex;
    flex-direction: column;
    gap: 15px;
  }
  
  .message {
    max-width: 80%;
    padding: 10px 15px;
    border-radius: 18px;
    position: relative;
    margin-bottom: 5px;
  }
  
  .message p {
    margin: 0;
    word-break: break-word;
  }
  
  .message.system {
    background-color: #f0f0f0;
    align-self: flex-start;
    border-bottom-left-radius: 5px;
  }
  
  .message.user {
    background-color: var(--primary-color, #8B0000);
    color: white;
    align-self: flex-end;
    border-bottom-right-radius: 5px;
  }
  
  .timestamp {
    display: block;
    font-size: 0.7rem;
    color: #666;
    margin-top: 5px;
    text-align: right;
  }
  
  .message.user .timestamp {
    color: rgba(255, 255, 255, 0.7);
  }
  
  /* Loading animation */
  .message.loading {
    padding: 15px;
  }
  
  .dots {
    display: flex;
    justify-content: center;
    gap: 5px;
  }
  
  .dots span {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: #888;
    display: inline-block;
    animation: bounce 1.5s infinite ease-in-out;
  }
  
  .dots span:nth-child(1) {
    animation-delay: 0s;
  }
  
  .dots span:nth-child(2) {
    animation-delay: 0.2s;
  }
  
  .dots span:nth-child(3) {
    animation-delay: 0.4s;
  }
  
  @keyframes bounce {
    0%, 80%, 100% { 
      transform: translateY(0);
    }
    40% {
      transform: translateY(-10px);
    }
  }
  
  .visitor-info {
    padding: 10px;
    border-top: 1px solid #eee;
    display: flex;
    flex-direction: column;
    gap: 8px;
  }
  
  .visitor-email, .visitor-name {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 0.9rem;
  }
  
  .chat-input {
    padding: 10px;
    border-top: 1px solid #eee;
    display: flex;
    align-items: flex-end;
    background-color: white;
  }
  
  #chat-input-field {
    flex: 1;
    border: 1px solid #ddd;
    border-radius: 20px;
    padding: 10px 15px;
    font-family: inherit;
    resize: none;
    max-height: 100px;
    overflow-y: auto;
    font-size: 0.95rem;
  }
  
  .chat-send {
    background-color: transparent;
    border: none;
    padding: 0 10px;
    cursor: pointer;
    color: var(--primary-color, #8B0000);
    display: flex;
    align-items: center;
    justify-content: center;
  }
    /* Mobile responsiveness */
  @media (max-width: 480px) {
    .chat-box {
      width: calc(100vw - 40px);
      height: 400px;
      bottom: 70px;
      right: -5px;
    }
    
    .chat-toggle {
      width: 50px;
      height: 50px;
    }
    
    .chat-header h3 {
      font-size: 1rem;
    }
    
    .message {
      max-width: 85%;
      padding: 8px 12px;
    }
  }
</style>
